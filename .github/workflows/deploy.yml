name: Deploy on Main Branch

on:
  push:
    branches:
      - main

jobs:
  publish-gh-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install dependencies
        run: rm -rf node_modules && rm -rf dist && npm install
      - name: Build
        run: npm run build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  generate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Get NPM version
        id: vars
        run: echo "npm_version=$(node -pe 'require("./package.json").version')" >> $GITHUB_OUTPUT
      - name: Display version
        run: echo ${{ steps.vars.outputs.npm_version }}
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.npm_version }}
          release_name: ${{ steps.vars.outputs.npm_version }}
          draft: true
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./public/schema.json
          asset_name: schema.json
          asset_content_type: application/json
      - name: Publish Release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
    outputs:
      version: ${{ steps.vars.outputs.npm_version }}

  trigger-sdk-update:
    runs-on: ubuntu-latest
    needs: generate-release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Display version
        run: echo ${{ needs.generate-release.outputs.version }}
      - name: Trigger SDK Update
        run: |
          curl -X POST https://api.github.com/repos/Chillibean/trial-container-api-client-sdk/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.API_SPEC_PAT_TOKEN }} \
          --data '{"event_type": "trigger_workflow", "client_payload": { "version": "${{ needs.generate-release.outputs.version }}" }}'
      - uses: actions/checkout@v3
  
  publish-to-swagger-hub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Get NPM version
        id: vars
        run: echo "npm_version=$(node -pe 'require("./package.json").version')" >> $GITHUB_OUTPUT
      - name: Publish to Swagger Hub
        run: |
          curl -X POST "https://api.swaggerhub.com/apis/chillibean/trial-container-api" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          --data-binary "@./public/schema.json"
      - name: Make API Private
        run: |
          curl -X PUT "https://api.swaggerhub.com/apis/chillibean/trial-container-api/${{ steps.vars.outputs.npm_version }}/settings/private" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"private": true}'
      - name: Publish the API
        run: |
          curl -X PUT "https://api.swaggerhub.com/apis/chillibean/trial-container-api/${{ steps.vars.outputs.npm_version }}/settings/lifecycle" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"published": true}'
      - name: Set Version Default
        run: |
          curl -X PUT "https://api.swaggerhub.com/apis/chillibean/trial-container-api/settings/default" \
          -H "Authorization: ${{ secrets.SWAGGER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"version": "${{ steps.vars.outputs.npm_version }}" }'